{"version":3,"sources":["firebase.js","actions.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","firestore","getCollection","collection","a","result","statusResponse","data","error","get","arrayData","docs","map","doc","id","console","log","addDocument","add","response","updateDocument","update","deleteDocument","delete","App","useState","task","setTask","tasks","setTasks","editMode","setEditMode","setId","description","setDescription","date","setDate","setError","useEffect","addTask","e","preventDefault","isEmpty","name","saveTask","editedTasks","item","deleteTask","filteredTasks","filter","className","size","scope","onClick","tarea","onSubmit","type","placeholder","onChange","text","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7f296dd4.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport firebase from \"firebase/app\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDn5lRipau0TBuKbKxtSHgRi1I12SQ0p5Q\",\r\n  authDomain: \"crud-f91fb.firebaseapp.com\",\r\n  projectId: \"crud-f91fb\",\r\n  storageBucket: \"crud-f91fb.appspot.com\",\r\n  messagingSenderId: \"444487142824\",\r\n  appId: \"1:444487142824:web:1926ebb5ff0e0035dfe19d\"\r\n};\r\n\r\n// Initialize Firebase\r\n//const app = initializeApp(firebaseConfig);\r\nexport const firebaseApp=firebase.initializeApp(firebaseConfig);","import { firebaseApp } from \"./firebase\";\r\n\r\nimport 'firebase/firestore';\r\n\r\n\r\n\r\nconst db=firebaseApp.firestore(firebaseApp)\r\n\r\nexport const getCollection= async(collection) =>{\r\n    const result ={statusResponse:false,data:null,error:null }\r\n    try{\r\n        const data = await db.collection(collection).get()\r\n        const arrayData = data.docs.map(doc=>({id:doc.id, ...doc.data()}))\r\n        console.log(arrayData)\r\n        result.statusResponse=true\r\n        result.data=arrayData\r\n    }catch(error){\r\n        result.error=error\r\n    }\r\n    return result\r\n}\r\n\r\nexport const addDocument=async(collection,data)=>{\r\n    const result={statusResponse:false,data:null,error:null}\r\n    try{\r\n        const response=await db.collection(collection).add(data)\r\n        result.data={id:response.id}\r\n        result.statusResponse=true\r\n    }catch(error){\r\n        result.error=error\r\n    }\r\n    return result\r\n}\r\n\r\n\r\nexport const getDocument=async(collection,id)=>{\r\n    const result={statusResponse:false,data:null,error:null}\r\n\r\n    try{\r\n        const response = await db.collection(collection).doc(id).get()\r\n        result.data={id:response.id,...response.data()}\r\n        result.statusResponse=true\r\n    }catch(error){\r\n        result.error=error\r\n    }\r\n    return result\r\n\r\n}\r\n\r\n\r\nexport const updateDocument=async(collection,id,data)=>{\r\n    const result={statusResponse:false,error:null}\r\n\r\n    try{\r\n        const response=await db.collection(collection).doc(id).update(data)\r\n        result.statusResponse=true\r\n\r\n    }catch(error){\r\n        result.error=error\r\n    }\r\n    return result\r\n\r\n}\r\n\r\n\r\nexport const deleteDocument=async(collection,id)=>{\r\n    const result={statusResponse:false, error:null}\r\n\r\n    try{\r\n        await db.collection(collection).doc(id).delete()\r\n        result.statusResponse=true\r\n    }catch(error){\r\n        result.error=error\r\n    }\r\n    return result\r\n\r\n\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { isEmpty, size } from 'lodash';\nimport { addDocument, deleteDocument, getCollection, updateDocument } from './actions';\n\n\nfunction App() {\n  const [task, setTask] = useState(\"\")\n  const [tasks, setTasks] = useState([])\n  const [editMode, setEditMode] = useState(false)\n  const [id, setId] = useState(\"\")\n  const [description, setDescription] = useState(\"\")\n  const [date, setDate] = useState(\"\")\n\n  const [error, setError] = useState(null)\n\n\n\n\n  useEffect(() => {\n    (async () => {\n      const result = await getCollection(\"tasks\")\n      console.log(result)\n      if (result.statusResponse) {\n        setTasks(result.data)\n      }}) () },[])\n\n\n\n  const addTask = async (e) => {\n    e.preventDefault()\n    if (isEmpty(task)) {\n      console.log(\"Task vacío\")\n      return\n    }\n\n    const result = await addDocument(\"tasks\", { name: task, description: description, date: date })\n    if (!result.statusResponse) {\n      setError(result.error)\n      return\n    }\n\n\n    setTasks([...tasks, { id: result.data.id, name: task, description: description, date: date }])\n    setTask(\"\")\n    setDescription(\"\")\n    setDate(\"\")\n  }\n\n  const saveTask = async (e) => {\n    e.preventDefault()\n    if (isEmpty(task)) {\n      console.log(\"Task vacío\")\n      return\n    }\n\n    const result = await updateDocument(\"tasks\", id, {name: task, description: description, date: date})\n    if (!result.statusResponse) {\n      setError(result.error)\n      return\n    }\n\n    const editedTasks = tasks.map(item => item.id===id ? { id, name: task, description: description, date: date} : item)\n    setTasks(editedTasks)\n    setEditMode(false)\n    setTask(\"\")\n    setId(\"\")\n    setDate(\"\")\n    setDescription(\"\")\n\n  }\n\n  const deleteTask = async (id) => {\n    const result = await deleteDocument(\"tasks\", id)\n    if (!result.statusResponse) \n    {\n      setError(result.error)\n      return\n    }\n    const filteredTasks = tasks.filter(task => task.id !== id)\n    setTasks(filteredTasks)\n  }\n\n  const editTask = (tarea) => {\n    setTask(tarea.name)\n    setDescription(tarea.description)\n    setDate(tarea.date)\n    setEditMode(true)\n    setId(tarea.id)\n  }\n\n  return (\n    <>\n      <div className=\"container mt-5\">\n        <h1>Tareas</h1>\n        <hr />\n        <div className=\"row aling-items-start\">\n          <div className=\"col-8\">\n            <h4 className=\"text-center\">Actividades</h4>\n            {\n              size(tasks) === 0 ? (\n                <h5 className=\"text-center\">Aun no hay tareas</h5>\n              ) : (\n                <table className=\"table\">\n                  <thead>\n                    <tr>\n                      <th scope=\"col\">Tarea</th>\n                      <th scope=\"col\">Descripción</th>\n                      <th scope=\"col\">Fecha</th>\n                      <th scope=\"col\">Acciones</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                  {\n                    tasks.map((task) => (\n                      <tr  key={task.id}>\n                        \n                        <td>{task.name}</td>\n                        <td>{task.description}</td>\n                        <td>{task.date}</td>\n                        <td><button\n                          className=\"btn btn-danger btn-sm float-right mx-2\"\n                          onClick={() => deleteTask(task.id)}\n                        >Eliminar </button>\n                          <button className=\"btn btn-warning btn-sm float-right\"\n                          onClick={() => editTask(task)}>\n                          Editar\n                        </button>\n                        </td>\n                        \n                      </tr>\n                      \n                    ))\n                  }\n                  </tbody>\n                </table>\n              )}\n          </div>\n          <div className=\"col-4\">\n            <h4 className=\"text-center\">{editMode ? \"Modificar tarea\" : \"Agregar Tarea\"}</h4>\n            <form onSubmit={editMode ? saveTask : addTask}>\n              <input\n                type=\"text\"\n                className=\"form-control mb-2\"\n                placeholder=\"Ingresar una tarea...\"\n                onChange={(text) => setTask(text.target.value)}\n                value={task}\n              />\n              <input\n                type=\"text\"\n                className=\"form-control mb-2\"\n                placeholder=\"Ingresar la descripcion...\"\n                onChange={(text) => setDescription(text.target.value)}\n                value={description}\n              />\n              <input\n                type=\"text\"\n                className=\"form-control mb-2\"\n                placeholder=\"Ingresar fecha de termino...\"\n                onChange={(text) => setDate(text.target.value)}\n                value={date}\n              />\n              <button className={editMode ? \"btn btn-warning btn-block\" : \"btn btn-dark btn-block\"}\n                type=\"submit\"\n              > {editMode ? \"Guardar\" : \"Agregar\"}</button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n  }\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'sw': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}